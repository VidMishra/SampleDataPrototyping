Digital Asset Link File
Ref: https://developers.google.com/digital-asset-links/v1/getting-started
Overview
The Digital Asset Links protocol and API enable an app or website to make public, verifiable statements about other apps or websites.
Here are some possible uses for Digital Asset Links:
•	Website A declares that links to its site should open in a designated app on mobile devices, if the app is installed.
•	Website A declares that it can share its Chrome user credentials with website B so that the user won't have to log in to website B if it is logged into website A.
•	App A declares that it can share device settings, such as location, with website B.

Principal & Target
Statement – Json construct containing Relation and Target identifier
Statement list - Contains statements. Clear text, publicly accessible at location controlled by principal. Difficult to spoof or tamper with. 
Can be an entire file – on website
Can be section of another larger item – Android manifest file

Usage Example

Location : https://www.example.com/.well-known/assetlinks.json

Content Snippet:
[{
  "relation": ["delegate_permission/common.handle_all_urls"],
  "target" : { "namespace": "android_app", "package_name": "com.example.app",
               "sha256_cert_fingerprints": ["hash_of_app_certificate"] }
}]


Statement is hosted on the Principal
App is setup with intent filter with auto verify(Android M)
User installs the App
Android notices autoVerify flag
Android checks for the presence of statement at site specified in the intent filter
If found, android verifies if:
-	Statement list includes a statement granting the link handling to the app
-	Verifies the app against the cert Hash
The user clicks a link say https://www.example.com/cars on the device.
Android forwards the intent to the example.com app.
Example.com app gets the link and choses to handle it and opens the ‘cars’ page.
In case if app decides not to handle this or the app is absent from the device, the link would be sent to the next default intent handler; browser in most cases.

Best Practices:
Follow these best practices to improve the user's experience:
•	The deep link should take users directly to the content, without any prompts, interstitial pages, or logins. Make sure that users can see the app content even if they never previously opened the application. It is okay to prompt users on subsequent interactions or when they open the app from the Launcher. This is the same principle as the first click free experience for web sites.
•	Follow the design guidance described in Navigation with Back and Up so that your app matches users' expectations for backward navigation after they enter your app through a deep link.

